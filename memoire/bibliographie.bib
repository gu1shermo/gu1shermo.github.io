@article{AlgorithmicComposition2023,
  title = {Algorithmic Composition},
  year = {2023},
  month = aug,
  journal = {Wikipedia},
  urldate = {2023-11-17},
  abstract = {Algorithmic composition is the technique of using algorithms to create music. Algorithms (or, at the very least, formal sets of rules) have been used to compose music for centuries; the procedures used to plot voice-leading in Western counterpoint, for example, can often be reduced to algorithmic determinacy. The term can be used to describe music-generating techniques that run without ongoing human intervention, for example through the introduction of chance procedures. However through live coding and other interactive interfaces, a fully human-centric approach to algorithmic composition is possible.Some algorithms or data that have no immediate musical relevance are used by composers as creative inspiration for their music. Algorithms such as fractals, L-systems, statistical models, and even arbitrary data (e.g. census figures, GIS coordinates, or magnetic field measurements) have been used as source materials.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1170658977},
  file = {C:\Users\GuiSh\Zotero-snap\storage\3T9D2WRM\Algorithmic_composition.html}
}

@inproceedings{andreattaInformatiqueMusicaleInformatique2019,
  title = {L'informatique Musicale : Informatique et Musique En Interdisciplinarit{\'e}},
  shorttitle = {L'informatique Musicale},
  booktitle = {Journ{\'e}es d'{{Informatique Musicale}} ({{JIM}} 2019)},
  author = {Andreatta, Moreno and Assayag, G{\'e}rard and {Desainte-Catherine}, Myriam and Giavitto, Jean-Louis and Giraud, Mathieu and Orlarey, Yann and S{\`e}des, Anne},
  year = {2019},
  month = may,
  address = {Bayonne, France},
  urldate = {2023-11-19},
  abstract = {L'informatique musicale, recherche en science et art du traitement automatis{\'e} d'informations musicales, rassemble une communaut{\'e} vivante de chercheurs et d'enseignants-chercheurs, ing{\'e}nieurs, artistes et p{\'e}dagogues. Ce document partage quelques r{\'e}flexions {\'e}pist{\'e}mologiques sur ce domaine par nature interdisciplinaire (parties 1 {\`a} 3) et propose des r{\'e}sultats pr{\'e}liminaires d'une cartographie de ces recherches en France (parties 4 et 5). 1. AUX SOURCES DE L'INFORMATIQUE MUSICALE La science et la musique ont toujours eu des liens forts, tout d'abord sur des aspects de gammes et d'acoustique. Le Quadrivium fut d{\'e}fini par Bo{\`e}ce au VI e si{\`e}cle et re-groupe les arts lib{\'e}raux des << sciences des nombres >>, {\`a} savoir l'arithm{\'e}tique, la musique, la g{\'e}om{\'e}trie et l'astro-nomie. L'harmonie des sph{\`e}res, liant proportions c{\'e}lestes et musique, est une des th{\'e}ories pythagoriciennes {\'e}tudi{\'e}es par Bo{\`e}ce [4]. Mille ans plus tard, notamment {\`a} partir des ouvrages de Zarlino [27], les questions de temp{\'e}rament, c'est-{\`a}-dire de distribution fr{\'e}quentielle de la gamme, sont un sujet majeur de d{\'e}bat musical et scientifique du XVI e au XIX e si{\`e}cle. {\`A} c{\^o}t{\'e} des pr{\'e}occupations acoustiques, le c{\^o}t{\'e} plus sym-bolique et calculatoire de la musique a aussi une longue histoire, notamment pour la g{\'e}n{\'e}ration musicale [1]. Cer-tains W{\"u}rfelspiele du XVIII e si{\`e}cle, jeux musicaux al{\'e}a-toires, sont par exemple attribu{\'e}s {\`a} Mozart. L'{\'e}mergence de la pens{\'e}e informatique va de pair avec des r{\'e}flexions sur la musique algorithmis{\'e}e. En 1843, Ada Lovelace, per-cevant l'universalit{\'e} de la machine propos{\'e}e par Charles Babbage, imagine d{\'e}j{\`a} que la musique puisse se formali-ser au point que l'ordinateur devienne compositeur [11] : It might act upon other things besides number , were objects found whose mutual fundamental relations could be expressed by those of the abstract science of operations, and which should be also susceptible of adaptations to the action of the operating notation and mechanism of the engine... Supposing, for instance , that the fundamental relations of pitched sounds in the science of harmony and of musical composition were susceptible of such expression and adaptations, the engine might compose elaborate and scientific pieces of music of any degree of complexity or extent. La pens{\'e}e s{\'e}rielle du d{\'e}but du XX e si{\`e}cle a aussi des aspects syst{\'e}matiques, parfois algorithmiques. Un si{\`e}cle apr{\`e}s Babbage et Lovelace, dans les ann{\'e}es 1940, les premiers ordinateurs suscitent rapidement des questions mu-sicales. D{\`e}s la fin des ann{\'e}es 1940, Alan Turing d{\'e}crit lui-m{\^e}me comment utiliser le haut-parleur du Mark II [6] :},
  file = {C:\Users\GuiSh\Zotero-snap\storage\3KCS9UE6\Andreatta et al. - 2019 - L'informatique musicale  informatique et musique .pdf}
}

@misc{bisqwitHowCreateMusic2010,
  title = {How to Create Music in {{C}}++ from Scratch ({{MIDI}} File Format) / {{C}}++11 Variadic Templates Example},
  author = {{Bisqwit}},
  year = {2010},
  month = oct,
  urldate = {2024-02-18},
  abstract = {In this tool-assisted education video, I demonstrate how to write a program that creates a MIDI file from scratch. Some basics on how to write music in a computer program are shown. You see me type every line.  Twitter: ~~/~realbisqwit~~ Patreon: ~~/~bisqwit~~ (alternatives at https://iki.fi/bisqwit/donate.html) Twitch: ~~/~realbisqwit~~ Homepage: https://iki.fi/bisqwit/ MIDI is described in detail in Wikipedia, but put very shortly (and not entirely accurately), its best analogy is in sheet music rather than in an mp3 file. To play MIDI files, you need a synthesizer. There are computer synthesizer programs for various operating systems. In this video, I used an AdLib synthesizer for DOS that I wrote once -- apologies about that -- because I still could not figure out how to record audio from Linux synced to DOSBox's speed, or how to hook TiMidity++ into DOSBox, and DOSBox does not yet even emulate MPU-401 to begin with. The loopBegin and loopEnd tags are only supported by two MIDI players that I know: FMDRV, which I have created (seen in this video), and Final Fantasy VII by Square Enix. I hold it in a standard's esteem. Also, as a peculiar quirk, I happen to be running Linux under DOS in this video. I wrote a Linux emulator for DOS using Borland C++ ;-) Actually, what I wrote is just a (very fast and accurate) terminal emulator; the "simulated" Linux is actually the host computer under which the DOSBox instance runs. The MHz/GHz rating at the bottom of the screen is the speed by which the CPU emulated by DOSBox runs. I adjust it occasionally during the recording (to make it possible for me to type a long piece of text in a very short time), and the rating is updated in real time. Also, it is only faintly seen, but I launch a FreeDOS shell at one point. It is why you see two different kind of "DIR" responses in the video. My editor of choice is neither Vi nor Emacs, but Joseph Allen's Joe. Normally I use 256-color xterm, but here I am running under 16-color DOS and VGA text mode, so the 256-colorness is only emulated by dynamically remapping the palette on demand. As another peculiar quirk, my Linux "emulator" sets up a 51-line text mode by adding one extra line of text to the screen. Incidentally, I discovered, this mode has a screen resolution of 720x408, which makes it very close to the aspect ratio of 16:9 with square pixels. Hence I set the video aspect ratio to 16:9 rather than VGA's actual ratio, 4:3. This is the first programming example for which I did not print a script beforehand. I planned and created this entirely in one evening. Therefore there is no PDF to download. But you can download the MIDI file produced by the program, here: https://bisqwit.iki.fi/jutut/kuvat/pr... (it is my original composition). The source code that I typed in this video can be downloaded here: https://bisqwit.iki.fi/jutut/kuvat/pr... You can find the DOSBox Linux terminal hack here: -- https://bisqwit.iki.fi/src/patch-dosb... -- This patch must be applied into DOSBox. -- https://bisqwit.iki.fi/src/linux\_for\_... -- This is the terminal program that is run in DOSBox. Note that it uses hard-coded Finnish keyboard layout. It requires that DOSBox is patched using the above patch.}
}

@book{blackwellLiveCodingUser2022,
  title = {Live Coding: A User's Manual},
  shorttitle = {Live Coding},
  author = {Blackwell, Alan and Cocker, Emma and Cox, Geoff and McLean, Alex and Magnusson, Thor},
  year = {2022},
  series = {Software Studies},
  publisher = {The MIT Press},
  address = {Cambridge, Massachusetts London},
  abstract = {"A multi-authored comprehensive introduction to live coding's potential open up deeper questions about contemporary cultural production and computational culture"--},
  isbn = {978-0-262-54481-8},
  langid = {english},
  keywords = {cg,live coding},
  file = {C:\Users\GuiSh\Zotero-snap\storage\5FZF76SZ\Blackwell et al. - 2022 - Live coding a user's manual.pdf}
}

@article{blackwellProgrammingLanguageMusical2005,
  title = {The {{Programming Language}} as a {{Musical Instrument}}},
  author = {Blackwell, Alan and Collins, Nick},
  year = {2005},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\4YHEL9NJ\Blackwell and Collins - 2005 - The Programming Language as a Musical Instrument.pdf}
}

@article{bouvierShadersDynamiquesPour,
  title = {{Les shaders dynamiques pour l'expressivit{\'e} artistique}},
  author = {Bouvier, Fabienne},
  abstract = {This dissertation is about real-time shaders from both technical and artistic point of views. It generally targets people who have certain knowledge about 3D in general, yet it tries, through some practical examples, to remain understandable for everyone in spite of some complex concepts.},
  langid = {french},
  file = {C:\Users\GuiSh\Zotero-snap\storage\GRMPCU8C\Bouvier - Les shaders dynamiques pour l'expressivit√© artisti.pdf}
}

@inproceedings{brownAacellPracticeApproach2007,
  title = {Aa-Cell in Practice : An Approach to Musical Live Coding},
  shorttitle = {Aa-Cell in Practice},
  booktitle = {International {{Computer Music Conference}}},
  author = {Brown, Andrew R. and Sorensen, Andrew C.},
  year = {2007},
  pages = {292--299},
  urldate = {2023-11-21},
  abstract = {Live coding performances provide a context with particular demands and limitations for music making. In this paper we discuss how as the live coding duo aa-cell we have responded to these challenges, and what this experience has revealed about the computational representation of music and approaches to interactive computer music performance. In particular we have identified several effective and efficient processes that underpin our practice including probability, linearity, periodicity, set theory, and recursion and describe how these are applied and combined to build sophisticated musical structures. In addition, we outline aspects of our performance practice that respond to the improvisational, collaborative and communicative requirements of musical live coding.},
  copyright = {free\_to\_read},
  langid = {english},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\ZMSV5ACV\\Brown and Sorensen - 2007 - aa-cell in practice  an approach to musical live .pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\Z6E44GSP\\39768.html}
}

@article{carlssonForgottenPioneersCreative2019,
  title = {The {{Forgotten Pioneers}} of {{Creative Hacking}} and {{Social Networking}}-- {{Introducing}} the {{Demoscene}}},
  author = {Carlsson, Anders},
  year = {2019},
  month = jun,
  urldate = {2023-11-17},
  abstract = {During mid 1980s evolved a networked culture that brought together tens of thousands of teenagers within the computerized world: the demoscene. This culture revolved around the production, dissemination, and competition of realtime generated audiovisual works (demos), demonstrating how to maximize specific hardware through unorthodox programming. The old demoscene was a closed community with its own infrastructure, artifacts, software tools, copyright system, aesthetics, economy, and social stratification, but new questions arise with its presence on the internet. With modems and illegal tricks to use telecommunications, teenagers at remote places could reach fame with their technical efforts in a subculture fenced off from real life identities. They were programmers, composers, and visual artists but also dedicated people that formed the backbone of the social network. Traders and swappers sent data around the world using modems or postal mail, sysops operated the bulletin board systems that people dialled with modems, while ascii artists designed the text-graphics for these boards. The demoscene receives very little attention in media, academia, and the arts. The paper will focus on communication but also explain the aesthetical aspects in order to fuel current discussions about open source creativity, remix culture, hacker art, digital communicative autonomy, and competition.},
  langid = {english},
  annotation = {Accepted: 2019-06-04T13:25:11Z},
  file = {C:\Users\GuiSh\Zotero-snap\storage\AIJPLU22\Carlsson - 2019 - The Forgotten Pioneers of Creative Hacking and Soc.pdf}
}

@article{clintonMusicImprovisationPython,
  title = {Music Improvisation in {{Python}} Using a {{Markov Chain Algorithm}}},
  author = {Clinton, William},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\Q9E7XQY7\Clinton - Music improvisation in Python using a Markov Chain.pdf}
}

@article{collinsAnalysisGenerativeMusic2008,
  title = {The {{Analysis}} of {{Generative Music Programs}}},
  author = {Collins, Nick},
  year = {2008},
  month = dec,
  journal = {Organised Sound},
  volume = {13},
  number = {3},
  pages = {237--248},
  publisher = {Cambridge University Press},
  issn = {1469-8153, 1355-7718},
  doi = {10.1017/S1355771808000332},
  urldate = {2023-12-07},
  abstract = {Composers have spent more than fifty years devising computer programs for the semi-automated production of music. This article shall focus in particular on the case of minimal run-time human intervention, where a program allows the creation of a musical variation, typically unravelling in realtime, on demand. These systems have the capacity to vary their output with each run, often from no more input information than the seeding of a random number generator with the start time. Such artworks are accumulating, released online as downloads, or exhibited through streaming radio sites such as rand()\%. Listener/users and composer/designers may wish for deeper insight into these programs' ontological status, mechanisms and creative potential. These works are challenging to dissect; this article makes a tentative start at confronting the unique problems and rich behaviours of computer-program-based generative music, from the social and historical context to the backwards engineering of programs in relation to their sound world. After a discussion of exemplars and definitions of generative art, strategies for analysis are outlined. To provide practical examples, analyses are provided of two small scale works by James McCartney.},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\U4RL3ZC9\collins2008.pdf.pdf}
}

@article{collinsLiveCodingLaptop2003,
  title = {{Live coding in laptop performance}},
  author = {Collins, Nick and McLEAN, Alex and Rohrhuber, Julian and Ward, Adrian},
  year = {2003},
  month = dec,
  journal = {Organised Sound},
  volume = {8},
  number = {3},
  pages = {321--330},
  publisher = {Cambridge University Press},
  issn = {1469-8153, 1355-7718},
  doi = {10.1017/S135577180300030X},
  urldate = {2023-11-17},
  abstract = {Seeking new forms of expression in computer music, a small number of laptop composers are braving the challenges of coding music on the fly. Not content to submit meekly to the rigid interfaces of performance software like Ableton Live or Reason, they work with programming languages, building their own custom software, tweaking or writing the programs themselves as they perform. Often this activity takes place within some established language for computer music like SuperCollider, but there is no reason to stop errant minds pursuing their innovations in general scripting languages like Perl. This paper presents an introduction to the field of live coding, of real-time scripting during laptop music performance, and the improvisatory power and risks involved. We look at two test cases, the command-line music of slub utilising, amongst a grab-bag of technologies, Perl and REALbasic, and Julian Rohrhuber's Just In Time library for SuperCollider. We try to give a flavour of an exciting but hazardous world at the forefront of live laptop performance.},
  langid = {french},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\BMCLTFUG\\collins2003.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\PDFQF8VQ\\Collins et al. - 2003 - Live coding in laptop performance.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\WFTBL3TK\\collins2003.pdf.pdf}
}

@book{collinsPacManPopMusic2008,
  title = {From {{Pac-Man}} to Pop Music: Interactive Audio in Games and New Media},
  shorttitle = {From {{Pac-Man}} to Pop Music},
  editor = {Collins, Karen},
  year = {2008},
  series = {Ashgate Popular and Folk Music Series},
  publisher = {Ashgate},
  address = {Aldershot, Hampshidre, England ; Burlington, VT},
  isbn = {978-0-7546-6200-6},
  langid = {english},
  lccn = {ML3540.7 .F76 2008},
  keywords = {History and criticism,Popular music,Video game music},
  file = {C:\Users\GuiSh\Zotero-snap\storage\FXS7Q94I\Collins - 2008 - From Pac-Man to pop music interactive audio in ga.pdf}
}

@inproceedings{collopyVisualMusicVisual1999,
  title = {Visual Music in a Visual Programming Language},
  booktitle = {Proceedings 1999 {{IEEE Symposium}} on {{Visual Languages}}},
  author = {Collopy, F. and Fuhrer, R.M. and Jameson, D.},
  year = {1999},
  month = sep,
  pages = {111--118},
  issn = {1049-2615},
  doi = {10.1109/VL.1999.795882},
  urldate = {2023-11-20},
  abstract = {Sonnet was designed as a visual language for implementing real-time processes. Early design and development of behavioral components has largely focused on the domain of music programming. However, Sonnet's architecture is well-suited to expressing many kinds of real-time activities. In particular, Sonnet is easily extended with new kinds of data types and behavioral components. We have developed a collection of visual output components for Sonnet, referred to collectively as Sonnet+Imager. Its design embodies aesthetically grounded representations of color, form and rhythm, as well as dynamics for each. Moreover, its value is enhanced by a flexible, modular architecture that treats these graphic entities and operations as first-class objects.},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\ZBH77W7K\\Collopy et al. - 1999 - Visual music in a visual programming language.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\KKFEEKM4\\795882.html}
}

@incollection{colubriGLSLShaders2023,
  title = {{{GLSL Shaders}}},
  booktitle = {Processing for {{Android}}: {{Create Mobile}}, {{Sensor-aware}}, and {{XR Applications Using Processing}}},
  author = {Colubri, Andr{\'e}s},
  editor = {Colubri, Andr{\'e}s},
  year = {2023},
  pages = {269--301},
  publisher = {Apress},
  address = {Berkeley, CA},
  doi = {10.1007/978-1-4842-9585-4_15},
  urldate = {2023-11-19},
  abstract = {We will conclude our journey through 3D graphics with an exciting topic: GLSL shaders. Shader programming has a fame of being the tool of choice for creating striking real-time graphics with the computer. While this is true, it is also true that coding shaders is not easy because they require an advanced understanding of how computers convert numbers into images on the screen, which often involves a great deal of mathematics. In this chapter, we will try to go through the basic concepts and applications of GLSL shaders step by step, so readers should end up with a good foundation to keep learning more about this powerful tool.},
  isbn = {978-1-4842-9585-4},
  langid = {english}
}

@book{comninosMathematicalComputerProgramming2006,
  title = {Mathematical and {{Computer Programming Techniques}} for {{Computer Graphics}}},
  author = {Comninos, Peter},
  year = {2006},
  publisher = {Springer London},
  address = {London},
  doi = {10.1007/978-1-84628-292-8},
  urldate = {2023-11-16},
  isbn = {978-1-85233-902-9 978-1-84628-292-8},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\YQ2UJA4D\Comninos - 2006 - Mathematical and Computer Programming Techniques f.pdf}
}

@incollection{copeAlgorithmicMusicComposition2015,
  title = {Algorithmic {{Music Composition}}},
  booktitle = {Patterns of {{Intuition}}},
  author = {Cope, David},
  editor = {Nierhaus, Gerhard},
  year = {2015},
  pages = {405--416},
  publisher = {Springer Netherlands},
  address = {Dordrecht},
  doi = {10.1007/978-94-017-9561-6_19},
  urldate = {2023-11-19},
  abstract = {Can machines compose music? Is composition an artistic act of inspired creation beyond the scope of current technology or is it amenable to some form of computer contribution? This report describes algorithms that perform specific composition tasks. Developing methods of machine composition requires the solution of a number of difficult problems in the fields of algorithm design, data representation, and human interface design, using techniques from software engineering, generative grammars, computer graphics, and others.},
  isbn = {978-94-017-9560-9 978-94-017-9561-6},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\X7EI6WGJ\Cope - 2015 - Algorithmic Music Composition.pdf}
}

@misc{cruzPsenoughTeach_yourself_demoscene_in_14_days2024,
  title = {Psenough/Teach\_yourself\_demoscene\_in\_14\_days},
  author = {Cruz, Filipe},
  year = {2024},
  month = feb,
  urldate = {2024-02-17},
  abstract = {A guide to learn and become active in the demoscene within a couple of weeks},
  copyright = {MIT},
  keywords = {demo-scene,demoscene,guide}
}

@article{cunninghamComputerGraphicsProgramming,
  title = {Computer {{Graphics}}: {{Programming}}, {{Problem Solving}}, and {{Visual Communication}}},
  author = {Cunningham, Dr Steve},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\U2SMMA87\Cunningham - Computer Graphics Programming, Problem Solving, a.pdf}
}

@book{deanOxfordHandbookAlgorithmic2018,
  title = {The {{Oxford}} Handbook of Algorithmic Music},
  editor = {Dean, R. T. and McLean, Alex},
  year = {2018},
  series = {Oxford Handbooks},
  publisher = {Oxford University Press},
  address = {New York, NY},
  isbn = {978-0-19-022699-2},
  langid = {english},
  lccn = {MT56 .O94 2018},
  keywords = {Computer composition (Music),Music / Instruction & Study / Composition,Music / Recording & Reproduction,Technology & Engineering / Acoustics & Sound},
  file = {C:\Users\GuiSh\Zotero-snap\storage\PG425SZ8\Dean and McLean - 2018 - The Oxford handbook of algorithmic music.pdf}
}

@article{Demoscene2023,
  title = {Demoscene},
  year = {2023},
  month = sep,
  journal = {Wikipedia},
  urldate = {2023-11-17},
  abstract = {The demoscene is an international computer art subculture focused on producing demos: self-contained, sometimes extremely small, computer programs that produce audiovisual presentations. The purpose of a demo is to show off programming, visual art, and musical skills. Demos and other demoscene productions (graphics, music, videos, games) are shared at festivals known as demoparties, voted on by those who attend and released online. The scene started with the home computer revolution of the early 1980s, and the subsequent advent of software cracking. Crackers altered the code of computer games to remove copy protection, claiming credit by adding introduction screens of their own ("cracktros"). They soon started competing for the best visual presentation of these additions. Through the making of intros and stand-alone demos, a new community eventually evolved, independent of the gaming:{$\mkern1mu$}29--30{$\mkern1mu$} and software sharing scenes. Demos are informally classified into several categories, mainly of size-restricted intros. The most typical competition categories for intros are the 64k intro and the 4K intro, where the size of the executable file is restricted to 65536 and 4096 bytes, respectively. In other competitions the choice of platform is restricted; only 8-bit computers like the Atari 800 or Commodore 64, or the 16-bit Amiga or Atari ST. Such restrictions provide a challenge for coders, musicians, and graphics artists, to make a device do more than was intended in its original design.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1173930704},
  file = {C:\Users\GuiSh\Zotero-snap\storage\QU4HIGIG\Demoscene.html}
}

@article{dewittVisualMusicSearching1987,
  title = {Visual {{Music}}: {{Searching}} for an {{Aesthetic}}},
  shorttitle = {Visual {{Music}}},
  author = {DeWitt, Tom},
  year = {1987},
  journal = {Leonardo},
  volume = {20},
  number = {2},
  pages = {115--122},
  publisher = {The MIT Press},
  issn = {1530-9282},
  urldate = {2023-11-20},
  abstract = {If the nonverbal and emotionally evocative aesthetic of music is to be extended to visual art, we must examine the psychology of sight and the intuitive uses of this psychology by visual artists. The structure of the eye, the nerve connections between the eye and the brain, and the visual cortex can give us clues as to how human perception is uniquely sensitive. These sensitivities, amplified through the self-expression of artists, can induce emotional responses that are more related to the form of the expression than to the content of the imagery. Works by the author and by other artists who influenced him are used to illustrate these points.}
}

@misc{earthstinkSquarepusherInterviewCreators2019,
  title = {Squarepusher {{Interview}}.  {{The Creators Project}} - {{Rencontre}} Avec {{Squarepusher}}},
  author = {{earthstink}},
  year = {2019},
  month = jul,
  urldate = {2023-12-24}
}

@inproceedings{formentLivecodingOuMusique2021,
  title = {Live-Coding et/Ou Musique En `` Plain-Texte ''},
  booktitle = {Journ{\'e}es d'{{Informatique Musicale}} 2021},
  author = {Forment, Raphael Maurice},
  year = {2021},
  month = jul,
  pages = {11},
  publisher = {AFIM},
  address = {Visioconf{\'e}rences, France},
  urldate = {2023-11-17},
  abstract = {Le terme de live-coding d{\'e}signe en informatique musicale l'art consistant {\`a} programmer {\`a} la vol{\'e}e une pi{\`e}ce musicale et/ou visuelle. Cette pratique s'accompagne, le plus souvent, d'une projection pour le public du code manipul{\'e} par le musicien. D{\'e}limiter les contours de cette pratique constitue un exercice auquel beaucoup se sont livr{\'e}s par d{\'e}fi ou par jeu. A minima, le live-coding peut {\^e}tre caract{\'e}ris{\'e} par le fait que les algorithmes au centre de la performance soient {\'e}crits et manipul{\'e}s en temps r{\'e}el, les musiciens relevant le << d{\'e}fi >> d'entretenir une << inter- relation homme-machine >> le plus souvent improvis{\'e}e. Le couple {\'e}diteur-clavier constitue l'interface de communication premi{\`e}re et fondamentale du musicien {\`a} son instrument et du musicien {\`a} son public. Aujourd'hui en essor, cette pratique peut {\^e}tre per{\c c}ue comme une expression du d{\'e}sir de retrouver une plus grande proximit{\'e} et connexion au m{\'e}dium informatique ou comme une volont{\'e} d'explorer une approche interactive, computationnelle et algorithmique de la cr{\'e}ation musicale [6]. La pratique du live-coding trouve au travers des Algoraves 1 , {\'e}v{\`e}nements centr{\'e}s autour de la cr{\'e}ation algorithmique de musique de danse, sa manifestation la plus visible. Cet article souhaite {\'e}tudier la dimension proprement textuelle du live-coding ainsi que la relation du musicien {\`a} son support : le code source ou fichier de texte brut. Nous introduirons un n{\'e}ologisme, celui de musique de plain- texte. Nous jugeons ce terme pertinent pour comprendre la dimension esth{\'e}tique et politique qui sous-tend cette pratique. Nous essaierons {\'e}galement d'{\'e}valuer ce que ce terme peut apporter {\`a} une r{\'e}flexion sur la conception d'outils logiciels d{\'e}di{\'e}s au live-coding.},
  keywords = {interactive programming,laptop performance,live coding},
  file = {C:\Users\GuiSh\Zotero-snap\storage\5GQAKXKT\Forment - 2021 - Live-coding etou musique en ‚Äú plain-texte ‚Äù.pdf}
}

@article{gavotyReProgrammerBoites,
  title = {{(Re)programmer des bo{\^i}tes noires}},
  author = {Gavoty, {\'E}lie},
  pages = {129},
  langid = {french},
  keywords = {abstraction informatique,boite noire,cg,Computer graphics,cracking,debordement de tampon,hack,hegemonie technique,logiciel libre,pbr},
  file = {C:\Users\GuiSh\Zotero-snap\storage\YEHGCPNA\Gavoty - (Re)programmer des bo√Ætes noires.pdf}
}

@article{GenerativeMusic2023,
  title = {Generative Music},
  year = {2023},
  month = aug,
  journal = {Wikipedia},
  urldate = {2023-11-17},
  abstract = {Generative music is a term popularized by Brian Eno to describe music that is ever-different and changing, and that is created by a system.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1168151980},
  file = {C:\Users\GuiSh\Zotero-snap\storage\2CBUXUSA\Generative_music.html}
}

@article{greenDemo,
  title = {Demo or {{Die}}!},
  author = {Green, Dave},
  journal = {Wired},
  issn = {1059-1028},
  urldate = {2023-11-17},
  abstract = {You're a teen hacker, you want to impress, you demo code},
  chapter = {tags},
  langid = {american},
  keywords = {demoscene},
  file = {C:\Users\GuiSh\Zotero-snap\storage\CQYRRQDT\democoders.html}
}

@article{hadji-kyriacouRaymarchingDistanceFields2021,
  title = {Raymarching {{Distance Fields}} with {{CUDA}}},
  author = {{Hadji-Kyriacou}, Avelina and Arandjelovi{\'c}, Ognjen},
  year = {2021},
  month = jan,
  journal = {Electronics},
  volume = {10},
  number = {22},
  pages = {2730},
  publisher = {Multidisciplinary Digital Publishing Institute},
  issn = {2079-9292},
  doi = {10.3390/electronics10222730},
  urldate = {2023-11-19},
  abstract = {Raymarching is a technique for rendering implicit surfaces using signed distance fields. It has been known and used since the 1980s for rendering fractals and CSG (constructive solid geometry) surfaces, but has rarely been used for commercial rendering applications such as film and 3D games. Raymarching was first used for photorealistic rendering in the mid 2000s by demoscene developers and hobbyist graphics programmers, receiving little to no attention from the academic community and professional graphics engineers. In the present work, we explain why the use of Simple and Fast Multimedia Library (SFML) by nearly all existing approaches leads to a number of inefficiencies, and hence set out to develop a CUDA oriented approach instead. We next show that the usual data handling pipeline leads to further unnecessary data flow overheads and therefore propose a novel pipeline structure that eliminates much of redundancy in the manner in which data are processed and passed. We proceed to introduce a series of data structures which were designed with the specific aim of exploiting the pipeline's strengths in terms of efficiency while achieving a high degree of photorealism, as well as the accompanying models and optimizations that ultimately result in an engine which is capable of photorealistic and real-time rendering on complex scenes and arbitrary objects. Lastly, the effectiveness of our framework is demonstrated in a series of experiments which compare our engine both in terms of visual fidelity and computational efficiency with the leading commercial and open source solutions, namely Unreal Engine and Blender.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {acceleration,CUDA kernels,graphics,photorealism,ray tracing,rendering,sphere tracing},
  file = {C:\Users\GuiSh\Zotero-snap\storage\PGRCHEI9\Hadji-Kyriacou and Arandjeloviƒá - 2021 - Raymarching Distance Fields with CUDA.pdf}
}

@inproceedings{hansenCraftingCodeDemoscene2014,
  title = {Crafting Code at the Demo-Scene},
  booktitle = {Proceedings of the 2014 Conference on {{Designing}} Interactive Systems},
  author = {Hansen, Nicolai Brodersen and N{\o}rg{\aa}rd, Rikke Toft and Halskov, Kim},
  year = {2014},
  month = jun,
  series = {{{DIS}} '14},
  pages = {35--38},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2598510.2598526},
  urldate = {2023-11-17},
  abstract = {This paper introduces the idea of craftsmanship as a way of understanding the shaping and re-shaping of code as a material crafting practice. We build our analysis on a qualitative study of a coder engaged in creative and expressive programming on an old hardware platform. The contribution of the paper is a set of conceptual categories: craft engagement, craftsmanship rhythm and craftsmanship expressivity, that conceptualizes coding as crafting.},
  isbn = {978-1-4503-2902-6},
  keywords = {code,craftsmanship,design materials,materials},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\3P9AVMCX\\Hansen et al. - 2014 - Crafting code at the demo-scene.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\YTGD7DMP\\hansen2014.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\Z2A4N5IN\\hansen2014.pdf.pdf}
}

@article{hartleyMultipleViewGeometry,
  title = {Multiple {{View Geometry}} in {{Computer Vision}}, {{Second Edition}}},
  author = {Hartley, Richard and Zisserman, Andrew},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\FJXSEHN2\Hartley and Zisserman - Multiple View Geometry in Computer Vision, Second .pdf}
}

@book{hegronSyntheseImageAlgorithmes1985,
  title = {{Synth{\`e}se d'image: algorithmes {\'e}l{\'e}mentaires}},
  shorttitle = {{Synth{\`e}se d'image}},
  author = {H{\'e}gron, G{\'e}rard},
  year = {1985},
  series = {{Afcet informatique}},
  publisher = {Afcet : Dunod]},
  address = {[Paris},
  isbn = {978-2-04-016427-0},
  langid = {french},
  lccn = {TA1632 .H44 1985},
  keywords = {Digital techniques,Image processing},
  file = {C:\Users\GuiSh\Zotero-snap\storage\WALYCRG3\H√©gron - 1985 - Synth√®se d'image algorithmes √©l√©mentaires.pdf}
}

@article{heikkilaFutureDemoArt,
  title = {The {{Future}} of {{Demo Art}}: {{The Demoscene}} in the 2010s},
  author = {Heikkila, Ville-Matias},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\YVLV3P7M\Heikkila - The Future of Demo Art The Demoscene in the 2010s.pdf}
}

@article{herremansFunctionalTaxonomyMusic2017,
  title = {A {{Functional Taxonomy}} of {{Music Generation Systems}}},
  author = {Herremans, Dorien and Chuan, Ching-Hua and Chew, Elaine},
  year = {2017},
  month = sep,
  journal = {ACM Computing Surveys},
  volume = {50},
  number = {5},
  pages = {69:1--69:30},
  issn = {0360-0300},
  doi = {10.1145/3108242},
  urldate = {2023-11-17},
  abstract = {Digital advances have transformed the face of automatic music generation since its beginnings at the dawn of computing. Despite the many breakthroughs, issues such as the musical tasks targeted by different machines and the degree to which they succeed remain open questions. We present a functional taxonomy for music generation systems with reference to existing systems. The taxonomy organizes systems according to the purposes for which they were designed. It also reveals the inter-relatedness amongst the systems. This design-centered approach contrasts with predominant methods-based surveys and facilitates the identification of grand challenges to set the stage for new breakthroughs.},
  keywords = {algorithmic composition,automatic composition,functional survey,Music generation,survey,taxonomy},
  file = {C:\Users\GuiSh\Zotero-snap\storage\PBDFAIJR\Herremans et al. - 2017 - A Functional Taxonomy of Music Generation Systems.pdf}
}

@book{holmesElectronicExperimentalMusic2009,
  title = {Electronic and Experimental Music: Technology, Music, and Culture},
  shorttitle = {Electronic and Experimental Music},
  author = {Holmes, Thom},
  year = {2009},
  edition = {3rd ed., transf. to digit. pr},
  publisher = {Routledge},
  address = {New York},
  isbn = {978-0-203-92959-9 978-0-415-95781-6 978-0-415-95782-3},
  langid = {english},
  keywords = {cg,Computer composition (Music),demoscene},
  file = {C:\Users\GuiSh\Zotero-snap\storage\FLKQB9M9\Holmes - 2009 - Electronic and experimental music technology, mus.pdf}
}

@article{jarvelainenAlgorithmicMusicalComposition,
  title = {Algorithmic {{Musical Composition}}},
  author = {J{\"a}rvel{\"a}inen, Hanna},
  langid = {english},
  keywords = {algorithmic composition,cellular automata,fractal,markov},
  file = {C:\Users\GuiSh\Zotero-snap\storage\HYEPYXVQ\J√§rvel√§inen - Algorithmic Musical Composition.pdf}
}

@misc{kirkbrideFoxDotWorksheet2023,
  title = {{{FoxDot Worksheet}}},
  author = {Kirkbride, Ryan},
  year = {2023},
  month = oct,
  urldate = {2023-12-21},
  abstract = {A worksheet that introduces key elements of the FoxDot live coding library}
}

@article{kirkbrideLiveCodingPython,
  title = {Live {{Coding}} with {{Python}} and {{SuperCollider}}},
  author = {Kirkbride, Ryan},
  abstract = {Live Coding is an electronic musical movement that is growing in popularity as an interface for musical expression where laptop performers program in front audiences; executing, editing, and re-executing blocks of code to generate music. The languages used in Live Coding are usually designed specifically for the purpose of creating music and distance themselves from the traditional paradigms of more general-purpose languages such as Java or Python. FoxDot is an application that bridges this gap to bring the art of performance programming and the science of software engineering together to create music in a way that is accessible to coders or composers; novices and experts alike.},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\JK9K5RRH\Kirkbride - Live Coding with Python and SuperCollider.pdf}
}

@article{kirkbrideTROOPCOLLABORATIVETOOL,
  title = {{{TROOP}}: {{A COLLABORATIVE TOOL FOR LIVE CODING}}},
  author = {Kirkbride, Ryan},
  abstract = {Live Coding is a movement in electronic audiovisual performance that emerged at the turn of the millennia [1] and is now being performed all over the world through range of artistic practices [2]. It involves the continual process of constructing and reconstructing a computer program and, given that most performances are improvisational in nature [3], working together from multiple computers can provide a challenge when performing as an ensemble. When performing as a group Live Coders will often share network resources, such as a tempo clock to coordinate rhythmic information [4, 5], but rarely will they work together directly with the same material.},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\XIACPSCZ\Kirkbride - TROOP A COLLABORATIVE TOOL FOR LIVE CODING.pdf}
}

@book{lengyelMathematics3DGame2012,
  title = {Mathematics for {{3D}} Game Programming and Computer Graphics},
  author = {Lengyel, Eric},
  year = {2012},
  edition = {3rd ed},
  publisher = {Course Technology, Cengage Learning},
  address = {Boston, MA},
  isbn = {978-1-4354-5886-4},
  langid = {english},
  lccn = {QA76.76.C672 L46 2012},
  keywords = {Computer graphics,Mathematics,Programming,Three-dimensional display systems,Video games},
  file = {C:\Users\GuiSh\Zotero-snap\storage\HZ2VL3P3\Lengyel - 2012 - Mathematics for 3D game programming and computer g.pdf}
}

@article{lilandLimitsUsageDemoscene,
  title = {Beyond the {{Limits}}: {{The Usage}} of {{C}}++ in the {{Demoscene}}},
  author = {Liland, Eivind and Geier, David},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\CTIIL4B8\Liland and Geier - Beyond the Limits The Usage of C++ in the Demosce.pdf}
}

@article{loewProceedingsCERC2012,
  title = {Proceedings of {{CERC}} 2012},
  author = {Loew, Robert},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\WGM3Q59M\Loew - Proceedings of CERC 2012.pdf}
}

@article{marschnerFundamentalsComputerGraphics,
  title = {Fundamentals of {{Computer Graphics}}, {{Fourth Edition}}},
  author = {Marschner, Steve},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\HJEEXKFA\Marschner - Fundamentals of Computer Graphics, Fourth Edition.pdf}
}

@article{mccartneyRethinkingComputerMusic2002,
  title = {Rethinking the {{Computer Music Language}}: {{SuperCollider}}},
  shorttitle = {Rethinking the {{Computer Music Language}}},
  author = {McCartney, James},
  year = {2002},
  month = dec,
  journal = {Computer Music Journal - COMPUT MUSIC J},
  volume = {26},
  pages = {61--68},
  doi = {10.1162/014892602320991383},
  abstract = {An overview of the SuperCollider language in correlation to the computer music generation is presented. SuperCollider is a dynamically typed, single-inheritance, single-argument dispatch, garbage-collected, object-oriented language similar to Smalltalk. The instrument functions in SuperCollider can generate the network of unit generators using the full algorithmic capability of the language.},
  keywords = {computer demos,computer hobby,demoscene,digital culture,domestication,home computers},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\2H4H84UZ\\mccartney2002.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\SJ633BZI\\McCartney - 2002 - Rethinking the Computer Music Language SuperColli.pdf}
}

@misc{molemanMolemanDemosceneArt2012,
  title = {Moleman 2 - {{Demoscene}} - {{The Art}} of the {{Algorithms}} (2012)},
  author = {{Moleman}},
  year = {2012},
  month = apr,
  urldate = {2024-02-17},
  abstract = {For the name of demos and music: Choose settings - subtitles - English - Name of demos and music. http://www.molemanfilm.com Please rate the film on IMDb: http://www.imdb.com/title/tt2170661/ In the 1980's, something changed the world forever. Computer technology, mostly due to the appearance of affordable Commodore 64's, entered households worldwide, providing the opportunity for everyone to create digital art. But existing art forms weren't the only ones to be re-implemented on these computers; brand new forms of art also appeared, ones thought to be impossible up to that point. Computers provided an opportunity for the creator to produce visuals and sound effects and combine them to create the ultimate audiovisual experience, by using only the language of mathematics and writing program code, without physical interaction. As a result of such techniques, demos were born, and with them, the demoscene subculture. A demo can best be understood as a spectacular animated music video which is usually a few minutes long. And yet it's something entirely different from a traditional video. Computer technics is the fastest developing part of our world, which produces more and more new opportunities for art. Moleman shows you now a digital subculture, where artists don't use always the latest technology, but their aim is also to bring out the best from 30 year-old computer technics.}
}

@article{montenontEtudeShaderComment,
  title = {{Etude du shader : Comment cr{\'e}er un shader r{\'e}aliste et stylis{\'e}}},
  author = {Montenont, Adrien},
  abstract = {During this year and more broadly during this educational program, I have been exploring and understanding the role and usefulness of shading in aesthetics. This thesis aims to explore the graphic style through art and its application in the world of 3D. I will study the creation of a shader and the hybridization of working methods with the intention of creating an existing or new graphic style.},
  langid = {french},
  file = {C:\Users\GuiSh\Zotero-snap\storage\2FQSHRBE\Montenont - Etude du shader  Comment cr√©er un shader r√©aliste.pdf}
}

@article{morganViolaChamberOrgan,
  title = {For Viola and Chamber Organ},
  author = {Morgan, Nigel},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\RQLC5RAR\Morgan - for viola and chamber organ.pdf}
}

@article{murrayRendu3DIntroduction,
  title = {{Rendu 3D - Introduction au pipeline graphique}},
  author = {Murray, David},
  langid = {french},
  file = {C:\Users\GuiSh\Zotero-snap\storage\6JPE2V8H\Murray - Rendu 3D - Introduction au pipeline graphique.pdf}
}

@inproceedings{nilsonLiveCodingPractice2007,
  title = {Live Coding Practice},
  booktitle = {Proceedings of the 7th International Conference on {{New}} Interfaces for Musical Expression},
  author = {Nilson, Click},
  year = {2007},
  month = jun,
  series = {{{NIME}} '07},
  pages = {112--117},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1279740.1279760},
  urldate = {2023-11-17},
  abstract = {Live coding is almost the antithesis of immediate physical musicianship, and yet, has attracted the attentions of a number of computer-literate musicians, as well as the music-savvy programmers that might be more expected. It is within the context of live coding that I seek to explore the question of practising a contemporary digital musical instrument, which is often raised as an aside but more rarely carried out in research (though see [12]). At what stage of expertise are the members of the live coding movement, and what practice regimes might help them to find their true potential?},
  isbn = {978-1-4503-7837-6},
  keywords = {live coding,practice,practising},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\9DHC8ZTU\\Nilson - 2007 - Live coding practice.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\JCNWDHDS\\nilson2007.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\KE29P3WM\\nilson2007.pdf.pdf}
}

@book{nortonLearningDevelopingGames2013,
  title = {Learning {{C}}\# by Developing Games with {{Unity 3D}} Beginner's Guide: Learn the Fundamentals of {{C}}\# to Create Scripts for Your {{GameObjects}}},
  shorttitle = {Learning {{C}}\# by Developing Games with {{Unity 3D}} Beginner's Guide},
  author = {Norton, Terry},
  year = {2013},
  series = {Learn by Doing: Less Theory, More Results},
  publisher = {Packt Publ},
  address = {Birmingham, UK},
  isbn = {978-1-84969-658-6},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\8B7S2XSP\Norton - 2013 - Learning C# by developing games with Unity 3D begi.pdf}
}

@article{pachetCyberneticJamFantasy2004,
  title = {Beyond the Cybernetic Jam Fantasy: The Continuator},
  shorttitle = {Beyond the Cybernetic Jam Fantasy},
  author = {Pachet, F.},
  year = {2004},
  month = jan,
  journal = {IEEE Computer Graphics and Applications},
  volume = {24},
  number = {1},
  pages = {31--35},
  issn = {1558-1756},
  doi = {10.1109/MCG.2004.1255806},
  urldate = {2023-12-07},
  abstract = {The Continuator is a usable musical instrument combining techniques from interactive and automatic learning systems. It learns and interactively plays with a user in the user's style. Music-generation systems have traditionally belonged to one of two categories: interactive systems in which players trigger musical phrases, events, or effects, such as the Karma musical workstation, and systems such as Risset's interactive piano, which allow for user input such as keystrokes or chords, but can't learn and use preprogrammed musical styles. Most of these systems propose musical effects libraries (a term used in the Karma workstation meaning a generation of music material based on user input). Although some of these effects are musically impressive, these systems can't be considered cybernetic musicians or even musical companions, because they use preprogrammed reactions and have no memory or facility for evolving.},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\C27NIAHY\\Pachet - 2004 - Beyond the cybernetic jam fantasy the continuator.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\QCFQHZ9N\\pachet2004.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\TDVNQRN9\\1255806.html}
}

@article{papadopoulosAIMethodsAlgorithmic,
  title = {{{AI Methods}} for {{Algorithmic Composition}}: {{A Survey}}, a {{Critical View}} and {{Future Prospects}}},
  author = {Papadopoulos, George and Wiggins, Geraint},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\BGZB5R3P\Papadopoulos and Wiggins - AI Methods for Algorithmic Composition A Survey, .pdf}
}

@techreport{patelHexagonalGrids2013,
  title = {Hexagonal {{Grids}}},
  author = {Patel, Amit J.},
  year = {2013},
  institution = {Red Blob Games},
  urldate = {2023-12-11},
  abstract = {Amit's guide to math, algorithms, and code for hexagonal grids in games},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\A9SYMSEI\hexagons.html}
}

@article{pharrPhysicallyBasedRendering,
  title = {Physically {{Based Rendering}}: {{From Theory}} to {{Implementation}}},
  author = {Pharr, Matt},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\UVRL9U7L\Pharr - Physically Based Rendering From Theory to Impleme.pdf}
}

@book{pharrPhysicallyBasedRendering2023,
  title = {Physically {{Based Rendering}}, Fourth Edition: {{From Theory}} to {{Implementation}}},
  shorttitle = {Physically {{Based Rendering}}, Fourth Edition},
  author = {Pharr, Matt and Jakob, Wenzel and Humphreys, Greg},
  year = {2023},
  month = mar,
  publisher = {MIT Press},
  abstract = {A comprehensive update of the leading-edge computer graphics textbook that sets the standard for physically-based rendering in the industry and the field, with new material on GPU ray tracing.Photorealistic computer graphics are ubiquitous in today's world, widely used in movies and video games as well as product design and architecture. Physically-based approaches to rendering, where an accurate modeling of the physics of light scattering is at the heart of image synthesis, offer both visual realism and predictability. Now in a comprehensively updated new edition, this best-selling computer graphics textbook sets the standard for physically-based rendering in the industry and the field. Physically Based Rendering describes both the mathematical theory behind a modern photorealistic rendering system as well as its practical implementation. A method known as literate programming combines human-readable documentation and source code into a single reference that is specifically designed to aid comprehension. The book's leading-edge algorithms, software, and ideas---including new material on GPU ray tracing---equip the reader to design and employ a full-featured rendering system capable of creating stunning imagery. This essential text represents the future of real-time graphics. Detailed and rigorous but accessible approach guides readers all the way from theory to practical software implementationFourth edition features new chapter on GPU ray tracing essential for game developersThe premier reference for professionals learning about and working in the fieldWon its authors a 2014 Academy Award for Scientific and Technical Achievement Includes a companion site complete with source code},
  googlebooks = {i9d2EAAAQBAJ},
  isbn = {978-0-262-04802-6},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / Design Graphics & Media / General,Computers / Software Development & Engineering / Computer Graphics}
}

@book{polgarFreaxBriefHistory2016,
  title = {Freax: {{The Brief History}} of the {{Computer Demoscene}}},
  shorttitle = {Freax},
  author = {Polg{\'a}r, Tam{\'a}s},
  year = {2016},
  month = apr,
  publisher = {CSW-Verlag},
  abstract = {FREAX -- the biggest book ever written about the history of the computer demoscene. The book tells the complete history of the Commodore 64 and the Amiga, both about the machines and about the underground subcultures around them, from the cracker- and warez-scene to the demoscene, from hacking and phreaking to the ASCII art scene. Interviews with scene celebrities, former key persons of the computer industry, citations from contemporary magazines and fanzines make the narrative history of the big adventure complete. The book contains 350 pages and is illustrated with 480 color photos and screenshots. This is the comprehensive guide to the golden era of home computers.},
  googlebooks = {Ha2\_EAAAQBAJ},
  isbn = {978-3-941287-97-6},
  langid = {english},
  keywords = {Computers / Design Graphics & Media / Video & Animation,Computers / Virtual & Augmented Reality},
  file = {C:\Users\GuiSh\Zotero-snap\storage\ICJVN4LC\Polg√°r - 2016 - Freax The Brief History of the Computer Demoscene.pdf}
}

@book{pritchettMusicJohnCage1996,
  title = {The {{Music}} of {{John Cage}}},
  author = {Pritchett, James},
  year = {1996},
  month = mar,
  publisher = {Cambridge University Press},
  abstract = {Although John Cage has been almost universally recognised as the leading figure of the post-war musical avant-garde, this is the first book to present a complete and coherent picture of Cage the composer. Providing a historical account of Cage's musical concerns and changing style, James Pritchett describes just what it was Cage did and why and how he did it. The book is centred around extensive descriptions of the most important works and compositional techniques, including in-depth explanations of the role of chance and indeterminacy in Cage's music. Dr Pritchett also considers the relationship of Cage's musical thought to his interests in such diverse subjects as Eastern philosophy and religion, Marshall McLuhan, and anarchism (among many others). This book thus makes the essential introduction to Cage's musical world.},
  googlebooks = {riHo22Hi8QAC},
  isbn = {978-0-521-56544-8},
  langid = {english},
  keywords = {Music / General,Music / Individual Composer & Musician}
}

@misc{psenoughSeminarTeachYourself2020,
  title = {Seminar: {{Teach Yourself Demoscene}} in 14 {{Days}} (Speaker: Ps)},
  shorttitle = {Seminar},
  author = {{psenough}},
  year = {2020},
  month = sep,
  urldate = {2024-02-17},
  abstract = {\#inercia2020 \#seminars \#demoscene https://github.com/psenough/teach\_you... http://inercia.pt}
}

@misc{pyconczRyanKirkbrideProgramming2018,
  title = {Ryan {{Kirkbride}}: {{Programming Music}} for {{Performance}}: {{Live}} Coding with {{FoxDot}}},
  shorttitle = {Ryan {{Kirkbride}}},
  author = {{PyCon CZ}},
  year = {2018},
  month = jun,
  urldate = {2024-01-14},
  abstract = {In this talk, I will introduce the topic of live coding -- the interactive programming experience for generating sound and visuals but this talk will mainly focus on the audio side. Live coders use programming languages to describe rules for generating music but then re-write these rules while the program is running. By continually writing and re-writing these rules live coders creating a shifting musical experience that is always in flux. All of this happens live in front of an audience with the code projected for all to see. I will go on to discuss a few of the many tools that are available for live coding and showcase the FoxDot environment, which allows you to live code music using Python. I will talk about the motivation for developing FoxDot and describe some of its key features as well as how you can set it up yourself at home. The talk will be concluded with a short demonstration that will be a partial explanation and partial performance.}
}

@article{reunanenComputerDemosWhat,
  title = {Computer {{Demos}}---{{What Makes Them Tick}}?},
  author = {Reunanen, Markku},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\DD6CSZ4D\Reunanen - Computer Demos‚ÄîWhat Makes Them Tick.pdf}
}

@article{reunanenDemoscene30Years,
  title = {Demoscene: 30 Years of Creative Programming},
  author = {Reunanen, Markku},
  langid = {english},
  file = {C:\Users\GuiSh\Zotero-snap\storage\AKDQZH36\Reunanen - Demoscene 30 years of creative programming.pdf}
}

@inproceedings{scheibDemoScene2002,
  title = {The Demo Scene},
  booktitle = {{{ACM SIGGRAPH}} 2002 Conference Abstracts and Applications},
  author = {Scheib, Vincent and {Engell-Nielsen}, Theo and Lehtinen, Saku and Haines, Eric and Taylor, Phil},
  year = {2002},
  month = jul,
  series = {{{SIGGRAPH}} '02},
  pages = {96--97},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1242073.1242125},
  urldate = {2023-11-17},
  abstract = {For 20 years, an underground movement has produced short real-time animations running on home computers. This group, the "demoscene," primarily consists of students who pursue their technical and artistic interests beyond the classroom, to create inspiring works of real-time art. These productions encompass a broad range of computer graphics techniques such as procedural geometry, real-time ray-tracing, and real-time shading. Game developers have been utilizing this talent pool yet it has little visibility in the SIGGRAPH community. This panel explores the demoscene, technical tricks used in demos, and how scene educational and creative aspects can contribute to the SIGGRAPH community.},
  isbn = {978-1-58113-525-1},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\S798VAPL\\Scheib et al. - 2002 - The demo scene.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\YCIZQL2A\\scheib2002.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\ZG3FJGEP\\scheib2002.pdf.pdf}
}

@book{scoatesBrianEnoVisual2013,
  title = {Brian {{Eno}}: {{Visual Music}}},
  shorttitle = {Brian {{Eno}}},
  author = {Scoates, Christopher},
  year = {2013},
  month = sep,
  publisher = {Chronicle Books},
  abstract = {This comprehensive monograph celebrates the visual art of renowned musician Brian Eno. Spanning more than 40 years, Brian Eno: Visual Music weaves a dialogue between Eno's museum and gallery installations and his musical endeavors---all illustrated with never-before-published archival materials such as sketchbook pages, installation views, screenshots, and more. Steve Dietz, Brian Dillon, Roy Ascott, and William R. Wright contextualize Eno's contribution to new media art, while Eno himself shares insights into his process. Also included is a download code for a previously unreleased piece of music created by Eno, making this ebook a requisite for fans and collectors.},
  googlebooks = {USsRAAAAQBAJ},
  isbn = {978-1-4521-2948-8},
  langid = {english},
  keywords = {Art / Film & Video,Art / Individual Artists / Monographs}
}

@inproceedings{selvarajLiveCodingReview2021,
  title = {Live {{Coding}}: {{A Review}} of the {{Literature}}},
  shorttitle = {Live {{Coding}}},
  booktitle = {Proceedings of the 26th {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Selvaraj, Ana and Zhang, Eda and Porter, Leo and Soosai Raj, Adalbert Gerald},
  year = {2021},
  month = jun,
  series = {{{ITiCSE}} '21},
  pages = {164--170},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3430665.3456382},
  urldate = {2023-11-20},
  abstract = {One of the goals of computing education research is to document the potential strengths and weaknesses of contemporary teaching methods in computing. Live coding has recently gained attention as one of the best practices for teaching programming. To offer a more comprehensive understanding of the existing body of research about live coding, we reviewed papers in computing education research that investigated the value of live coding in an educational setting. We categorized each paper based on (1) how it defines live coding, (2) whether its version of live coding could be considered active learning, (3) the type of study conducted, (4) types of data collected and the data analysis methods used, (5) evidence provided for the effectiveness of live coding, (6) reported benefits and drawbacks of live coding, and (7) reported theoretical frameworks used to explain the basis, effects or goals of live coding. We found that although live coding has been recommended as one of the best practices for teaching programming, there is a lack of empirical evidence to support claims about the effectiveness of live coding on student learning. Finally, we discuss the implications of our findings and suggest future research directions that could develop a more holistic understanding of this pedagogical technique.},
  isbn = {978-1-4503-8214-4},
  keywords = {active learning,computer science education,literature review,live coding},
  file = {C:\Users\GuiSh\Zotero-snap\storage\KM8KB9XR\Selvaraj et al. - 2021 - Live Coding A Review of the Literature.pdf}
}

@book{shiffmanNatureCode2012,
  title = {The Nature of Code},
  author = {Shiffman, Daniel},
  year = {2012},
  edition = {Version 1.0, generated December 6, 2012},
  publisher = {Selbstverl.},
  address = {s.l.},
  isbn = {978-0-9859308-0-6},
  langid = {english}
}

@inproceedings{svidzinskiLIVEPATCHINGCOLLABORATIF2021,
  title = {{{LIVE PATCHING COLLABORATIF}} - {{VERS UNE MEDIATION INCLUSIVE AVEC L}}'{{INFORMATIQUE MUSICALE}}},
  booktitle = {Journ{\'e}es d'{{Informatique Musicale}} 2021},
  author = {Svidzinski, Jo{\~a}o and Marcello, Messina},
  year = {2021},
  month = jul,
  publisher = {AFIM},
  address = {Visioconf{\'e}rences, France},
  urldate = {2023-11-19},
  abstract = {Nous pr{\'e}sentons dans cet article un projet work in progress avec live patching au sein d'une collaboration avec le Conservatoire de Saint-Denis. Apr{\`e}s avoir utilis{\'e} le logiciel Kiwi pour cette pratique, nous migrons vers Pure Data et Faust en poursuivant notre conception du live patching, notamment l'approche << commencer du z{\'e}ro >>. C'est-{\`a}-dire, construire collaborativement et en temps r{\'e}el un patch sans aucun a priori, {\`a} partir d'un document vide. Cette pratique a {\'e}t{\'e} appliqu{\'e}e au sein d'un atelier avec le Conservatoire de Saint-Denis, aboutissant sur une repr{\'e}sentation publique le 29 mars 2021 {\`a} la Maison des Sciences de l'Homme Paris Nord. Pour cette restitution, nous avons choisi de pr{\'e}senter une s{\'e}ance construite {\`a} partir des nos ateliers avec live patching. Plut{\^o}t que de coder en temps r{\'e}el, les participants ont jou{\'e} avec un patch d{\'e}j{\`a} cr{\'e}{\'e}, mais pouvant interagir avec des diapositives OSC et avec leurs instruments musicaux},
  file = {C:\Users\GuiSh\Zotero-snap\storage\DWPBJS68\Svidzinski and Marcello - 2021 - LIVE PATCHING COLLABORATIF - VERS UNE MEDIATION IN.pdf}
}

@inproceedings{tanimotoPerspectiveEvolutionLive2013,
  title = {A Perspective on the Evolution of Live Programming},
  booktitle = {2013 1st {{International Workshop}} on {{Live Programming}} ({{LIVE}})},
  author = {Tanimoto, Steven L.},
  year = {2013},
  month = may,
  pages = {31--34},
  publisher = {IEEE},
  address = {San Francisco, CA, USA},
  doi = {10.1109/LIVE.2013.6617346},
  urldate = {2023-11-16},
  abstract = {Liveness in programming environments generally refers to the ability to modify a running program. Liveness is one form of a more general class of behaviors by a programming environment that provide information to programmers about what they are constructing. This paper gives a brief historical perspective on liveness and proposes an extension of a hierarchy given in 1990, to now account for even more powerful executionoriented tools for programmers. In addition, while liveness concerns the timeliness of execution feedback, considering a broader array of forms of feedback is helpful both in better understanding liveness and in designing ever more powerful development tools.},
  isbn = {978-1-4673-6265-8},
  langid = {english},
  keywords = {cg,live coding},
  file = {C\:\\Users\\GuiSh\\Zotero-snap\\storage\\2Z5KUDKC\\Tanimoto - 2013 - A perspective on the evolution of live programming.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\B2QBWLHZ\\tanimoto2013.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\JVTCIYP7\\Tanimoto - 2013 - A perspective on the evolution of live programming.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\NB6VHEPS\\tanimoto2013.pdf.pdf;C\:\\Users\\GuiSh\\Zotero-snap\\storage\\5KGW39WQ\\6617346.html}
}

@book{tasajarviDemosceneArtRealtime2004,
  title = {Demoscene: The Art of Real-Time},
  shorttitle = {Demoscene},
  author = {Tasaj{\"a}rvi, Lassi and Schustin, Mikael and Stamnes, Bent and Tolonen, Arttu},
  year = {2004},
  publisher = {Even Lake Studios : Katastro. Fi},
  address = {Helsinki},
  isbn = {978-952-91-7022-7},
  langid = {english},
  keywords = {cg,demoscene},
  annotation = {OCLC: 180766561}
}
